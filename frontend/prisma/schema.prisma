generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  subscribedusers subscribedusers[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatBot {
  id            Int          @id @default(autoincrement())
  userId        String       @db.VarChar
  name          String       @db.VarChar
  description   String
  System_Prompt String
  createdAt     DateTime?    @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime?    @default(now()) @db.Timestamptz(6)
  api_key       String?      @db.VarChar(255)
  DataSource    DataSource[]
  Analytics     analytics?
  embeddings    embeddings[]
}

model embeddings {
  id           Int                   @id @default(autoincrement())
  userId       String                @db.VarChar
  chatbotid    Int
  topic        String                @db.VarChar
  text         String                @db.VarChar
  embedding    Unsupported("vector")
  createdAt    DateTime?             @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime?             @default(now()) @db.Timestamptz(6)
  dataSourceId Int?
  citation     String?
  ChatBot      ChatBot               @relation(fields: [chatbotid], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_chatbotid")
  DataSource   DataSource?           @relation(fields: [dataSourceId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_datasourceid")

  @@index([embedding], map: "embedding_idx")
  @@index([citation], map: "idx_embeddings_citation")
}

model DataSource {
  id            Int          @id @default(autoincrement())
  chatbotId     Int
  type          String
  sourceDetails Json         @db.Json
  createdAt     DateTime?    @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime?    @default(now()) @db.Timestamptz(6)
  name          String       @db.VarChar
  citation      String?
  ChatBot       ChatBot      @relation(fields: [chatbotId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_chatbot")
  embeddings    embeddings[]

  @@index([citation], map: "idx_datasource_citation")
}

// type in datadource can be 'Website', 'Document', 'QandA', 'Notion', 'WordPress', 'CodeFile', 'GitHub', 'Other')
model analytics {
  id        Int        @id @default(autoincrement())
  chatbotid Int        @unique(map: "unique_chatbotid")
  responses Int?       @default(0)
  likes     Int?       @default(0)
  dislikes  Int?       @default(0)
  createdat DateTime?  @default(now()) @db.Timestamptz(6)
  updatedat DateTime?  @default(now()) @db.Timestamptz(6)
  ChatBot   ChatBot    @relation(fields: [chatbotid], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_chatbot")
  citation  citation[]
}


model citation {
  id          Int       @id @default(autoincrement())
  analyticsid Int
  chatbotid   Int
  source      String
  count       Int?      @default(1)
  createdat   DateTime? @default(now()) @db.Timestamp(6)
  updatedat   DateTime? @default(now()) @db.Timestamp(6)
  analytics   analytics @relation(fields: [analyticsid], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_analytics")

  @@unique([chatbotid, source])
}


model subscriptionplans {
  planid          Int               @id @default(autoincrement())
  planname        String            @db.VarChar(255)
  isactive        Boolean?          @default(true)
  durationindays  Int
  createdat       DateTime?         @default(now()) @db.Timestamp(6)
  updatedat       DateTime?         @default(now()) @db.Timestamp(6)
  pricemonthly    Decimal           @db.Decimal(10, 2)
  priceannually   Decimal           @db.Decimal(10, 2)
  subscribedusers subscribedusers[]
}

model subscribedusers {
  subscriptionid    Int               @id @default(autoincrement())
  userid            String            @db.VarChar(255)
  planid            Int
  startdate         DateTime?         @default(now()) @db.Timestamp(6)
  expirydate        DateTime          @db.Timestamp(6)
  isactive          Boolean?          @default(true)
  autorenew         Boolean?          @default(false)
  createdat         DateTime?         @default(now()) @db.Timestamp(6)
  updatedat         DateTime?         @default(now()) @db.Timestamp(6)
  subscriptionplans subscriptionplans @relation(fields: [planid], references: [planid], onDelete: Cascade, onUpdate: NoAction, map: "fk_plan")
  User              User              @relation(fields: [userid], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")

  @@index([userid], map: "idx_user_id")
}
